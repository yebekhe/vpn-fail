<?php

header("Content-type: application/json;");

// Enable error reporting
ini_set("display_errors", 1);
ini_set("display_startup_errors", 1);
error_reporting(E_ERROR | E_PARSE);
  
function openLink($url) {
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_USERAGENT => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36",
        CURLOPT_FOLLOWLOCATION => true,
    ]);
    return curl_exec($ch);
}
  
function getCountryCode($countryName) {
    // Associative array mapping country names to their ISO 3166-1 alpha-2 codes
    $countryCodes = json_decode(file_get_contents("countries.lock"), true);

    // Convert the input to title case to handle case insensitivity
    $countryName = ucwords(strtolower($countryName));

    // Check if the country name exists in the array
    if (array_key_exists($countryName, $countryCodes)) {
        return $countryCodes[$countryName];
    } else {
        return "Country not found";
    }
}

function extractArticleData($html) {
    // Create a new DOMDocument instance
    $dom = new DOMDocument();
    
    // Load the HTML into the DOMDocument
    // The @ suppresses warnings that could be generated by malformed HTML
    @$dom->loadHTML($html);
    
    // Create a new DOMXPath instance
    $xpath = new DOMXPath($dom);
    
    // Query all <article> tags
    $articles = $xpath->query('//article');
    
    // Initialize an array to store the results
    $results = [];
    
    // Get the current timestamp
    $currentTime = time();
    
    // Define the maximum allowed difference in seconds (30 minutes)
    $maxDifference = 30 * 60;
    
    // Loop through the found <article> tags
    foreach ($articles as $article) {
        // Get the <div> with class "col-sm-3 text-right" that contains the time value
        $timeDiv = $xpath->query('.//div[contains(@class, "col-sm-3 text-right")]', $article)->item(0);
        
        // Get the text content of the <span> within the time <div>
        $timeSpan = $timeDiv ? $xpath->query('.//span', $timeDiv)->item(0) : null;
        
        // Get the value of the time <span>
        $timeValue = $timeSpan ? trim($timeSpan->textContent) : null;
        
        // Check if the time value is within the allowed difference
        if ($timeValue && abs($currentTime - $timeValue) <= $maxDifference) {
            // Get the first <a> tag within the <article>
            $firstLink = $xpath->query('.//div//a', $article)->item(0);
            
            // Get the href attribute of the first <a> tag
            $firstHref = $firstLink ? $firstLink->getAttribute('href') : null;
            
            // Get the <div> with class "col-sm-2 text-center" that contains the country name
            $countryDiv = $xpath->query('.//div[contains(@class, "col-sm-2 text-center") and .//a[contains(@href, "/country/")]]', $article)->item(0);
            
            // Get the text content of the <a> tag within the country <div>
            $countryText = $countryDiv ? trim($countryDiv->textContent) : null;
            
            // Initialize the input value
            $inputValue = null;
            $countryFromPre = null;
            
            // If there is a first href, fetch the content and extract the input value and country from <pre>
            if ($firstHref) {
                $inputValue = fetchInputValue($firstHref, $countryFromPre);
            }
            
            // Add the extracted data to the results array
            $results[] = [
                'first_href' => $firstHref,
                'country_text' => $countryText ?? "XX",
                'time_value' => $timeValue,
                'input_value' => $inputValue,
                'country_from_pre' => $countryFromPre ?? getCountryCode($countryText ?? "XX")
            ];
        } else {
            // If the time value exceeds the allowed difference, break the loop
            break;
        }
    }
    
    // Return the results
    return $results;
}

function fetchInputValue($url, &$countryFromPre) {
    // Initialize cURL session
    $ch = curl_init();
    
    // Set cURL options
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    // Execute cURL session and get the content
    $content = curl_exec($ch);
    
    // Close cURL session
    curl_close($ch);
    
    // Create a new DOMDocument instance
    $dom = new DOMDocument();
    
    // Load the fetched content into the DOMDocument
    // The @ suppresses warnings that could be generated by malformed HTML
    @$dom->loadHTML($content);
    
    // Create a new DOMXPath instance
    $xpath = new DOMXPath($dom);
    
    // Query the <input> element with id="pp2"
    $input = $xpath->query('//input[@id="pp2"]')->item(0);
    
    // Get the value attribute of the <input> element
    $inputValue = $input ? $input->getAttribute('value') : null;
    
    // Query the <pre> element
    $pre = $xpath->query('//pre')->item(0);
    
    // Get the text content of the <pre> element
    $preContent = $pre ? $pre->textContent : null;
    
    // Extract the "Country:" line from the <pre> content
    if ($preContent) {
        preg_match('/Country:\s*([A-Z]{2})/', $preContent, $matches);
        $countryFromPre = $matches[1] ?? null;
    }
    
    // Return the input value
    return $inputValue;
}

// Example usage
$html = openLink("https://vpn.fail/free-proxy/type/v2ray");

$results = extractArticleData($html);

file_put_contents("api", json_encode($results, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE));
  
foreach ($results as $config) {
    $output .= $config['input_value'] . "\n";  
}

// Print the results
file_put_contents ("sub-link", base64_encode($output));