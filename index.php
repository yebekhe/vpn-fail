<?php
declare(strict_types=1);

header("Content-type: application/json;");
ini_set("display_errors", "1");
ini_set("display_startup_errors", "1");
error_reporting(E_ALL);

class ProxyScraper {
    private const USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36";
    private const MAX_TIME_DIFFERENCE = 30 * 60; // 30 minutes in seconds
    private const COUNTRIES_FILE = "countries.lock";
    private const OUTPUT_FILES = [
        'api' => 'api',
        'sub_link' => 'sub-link'
    ];
    
    private $countryCodes;
    private $curlOptions;
    
    public function __construct() {
        $this->loadCountryCodes();
        $this->initializeCurlOptions();
    }
    
    /**
     * Load country codes from file
     */
    private function loadCountryCodes(): void {
        if (!file_exists(self::COUNTRIES_FILE)) {
            throw new RuntimeException("Countries file not found: " . self::COUNTRIES_FILE);
        }
        
        $content = file_get_contents(self::COUNTRIES_FILE);
        if ($content === false) {
            throw new RuntimeException("Failed to read countries file");
        }
        
        $this->countryCodes = json_decode($content, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new RuntimeException("Invalid JSON in countries file: " . json_last_error_msg());
        }
    }
    
    /**
     * Initialize cURL options for reuse
     */
    private function initializeCurlOptions(): void {
        $this->curlOptions = [
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_USERAGENT => self::USER_AGENT,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_CONNECTTIMEOUT => 10,
            CURLOPT_SSL_VERIFYPEER => true,
            CURLOPT_SSL_VERIFYHOST => 2
        ];
    }
    
    /**
     * Fetch content from URL with error handling
     */
    public function fetchUrl(string $url): string {
        if (!filter_var($url, FILTER_VALIDATE_URL)) {
            throw new InvalidArgumentException("Invalid URL: " . $url);
        }
        
        $ch = curl_init($url);
        if ($ch === false) {
            throw new RuntimeException("Failed to initialize cURL");
        }
        
        curl_setopt_array($ch, $this->curlOptions);
        
        $content = curl_exec($ch);
        $error = curl_error($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        curl_close($ch);
        
        if ($error) {
            throw new RuntimeException("cURL error: " . $error);
        }
        
        if ($httpCode >= 400) {
            throw new RuntimeException("HTTP error: " . $httpCode);
        }
        
        return $content;
    }
    
    /**
     * Get country code from country name
     */
    public function getCountryCode(string $countryName): string {
        if (empty($countryName)) {
            return "XX";
        }
        
        // Convert the input to title case to handle case insensitivity
        $formattedName = ucwords(strtolower(trim($countryName)));
        
        // Check if the country name exists in the array
        return $this->countryCodes[$formattedName] ?? "XX";
    }
    
    /**
     * Extract article data from HTML content
     */
    public function extractArticleData(string $html): array {
        $dom = new DOMDocument();
        
        // The @ suppresses warnings that could be generated by malformed HTML
        if (!@$dom->loadHTML($html)) {
            throw new RuntimeException("Failed to parse HTML");
        }
        
        $xpath = new DOMXPath($dom);
        $articles = $xpath->query('//article');
        
        if ($articles === false) {
            throw new RuntimeException("Failed to query articles");
        }
        
        $results = [];
        $currentTime = time();
        
        foreach ($articles as $article) {
            $timeValue = $this->extractTimeValue($xpath, $article);
            
            // Check if the time value is within the allowed difference
            if (!$timeValue || abs($currentTime - $timeValue) > self::MAX_TIME_DIFFERENCE) {
                break;
            }
            
            $firstHref = $this->extractFirstHref($xpath, $article);
            $countryText = $this->extractCountryText($xpath, $article);
            
            $inputValue = null;
            $countryFromPre = null;
            
            // If there is a first href, fetch the content and extract the input value and country from <pre>
            if ($firstHref) {
                try {
                    $inputValue = $this->fetchInputValue($firstHref, $countryFromPre);
                } catch (RuntimeException $e) {
                    error_log("Error fetching input value: " . $e->getMessage());
                    $inputValue = null;
                }
            }
            
            $results[] = [
                'first_href' => $firstHref,
                'country_text' => $countryText ?? "XX",
                'time_value' => $timeValue,
                'input_value' => $inputValue,
                'country_from_pre' => $countryFromPre ?? $this->getCountryCode($countryText ?? "XX")
            ];
        }
        
        return $results;
    }
    
    /**
     * Extract time value from article
     */
    private function extractTimeValue(DOMXPath $xpath, DOMElement $article): ?int {
        $timeDiv = $xpath->query('.//div[contains(@class, "col-sm-3 text-right")]', $article)->item(0);
        $timeSpan = $timeDiv ? $xpath->query('.//span', $timeDiv)->item(0) : null;
        $timeValue = $timeSpan ? trim($timeSpan->textContent) : null;
        
        return $timeValue ? (int)$timeValue : null;
    }
    
    /**
     * Extract first href from article
     */
    private function extractFirstHref(DOMXPath $xpath, DOMElement $article): ?string {
        $firstLink = $xpath->query('.//div//a', $article)->item(0);
        return $firstLink ? $firstLink->getAttribute('href') : null;
    }
    
    /**
     * Extract country text from article
     */
    private function extractCountryText(DOMXPath $xpath, DOMElement $article): ?string {
        $countryDiv = $xpath->query('.//div[contains(@class, "col-sm-2 text-center") and .//a[contains(@href, "/country/")]]', $article)->item(0);
        return $countryDiv ? trim($countryDiv->textContent) : null;
    }
    
    /**
     * Fetch input value from URL
     */
    public function fetchInputValue(string $url, ?string &$countryFromPre): ?string {
        $content = $this->fetchUrl($url);
        
        $dom = new DOMDocument();
        if (!@$dom->loadHTML($content)) {
            throw new RuntimeException("Failed to parse HTML from URL: " . $url);
        }
        
        $xpath = new DOMXPath($dom);
        
        // Query the <input> element with id="pp2"
        $input = $xpath->query('//input[@id="pp2"]')->item(0);
        $inputValue = $input ? $input->getAttribute('value') : null;
        
        // Query the <pre> element
        $pre = $xpath->query('//pre')->item(0);
        $preContent = $pre ? $pre->textContent : null;
        
        // Extract the "Country:" line from the <pre> content
        if ($preContent && preg_match('/Country:\s*([A-Z]{2})/', $preContent, $matches)) {
            $countryFromPre = $matches[1] ?? null;
        }
        
        return $inputValue;
    }
    
    /**
     * Save results to files
     */
    public function saveResults(array $results): void {
        // Save API data
        $apiData = json_encode($results, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        if ($apiData === false) {
            throw new RuntimeException("Failed to encode API data");
        }
        
        if (file_put_contents(self::OUTPUT_FILES['api'], $apiData) === false) {
            throw new RuntimeException("Failed to write API file");
        }
        
        // Prepare and save sub-link data
        $output = '';
        foreach ($results as $config) {
            if (!empty($config['input_value'])) {
                $output .= $config['input_value'] . "\n";
            }
        }
        
        $encodedOutput = base64_encode($output);
        if (file_put_contents(self::OUTPUT_FILES['sub_link'], $encodedOutput) === false) {
            throw new RuntimeException("Failed to write sub-link file");
        }
    }
}

// Main execution
try {
    $scraper = new ProxyScraper();
    
    $html = $scraper->fetchUrl("https://vpn.fail/free-proxy/type/v2ray");
    $results = $scraper->extractArticleData($html);
    $scraper->saveResults($results);
    
    echo json_encode([
        'success' => true,
        'message' => 'Data scraped successfully',
        'count' => count($results)
    ]);
} catch (Throwable $e) {
    error_log("Error in proxy scraping: " . $e->getMessage());
    
    echo json_encode([
        'success' => false,
        'message' => 'Error: ' . $e->getMessage()
    ]);
}